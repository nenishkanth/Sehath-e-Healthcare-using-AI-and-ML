stroke_prediction.py
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.metrics import accuracy_score, classification_report
import joblib
# Step 1: Load and preprocess data
def load_data(filename):
    return pd.read_csv(filename)#Load the datasets
stroke_data = load_data("healthcare-dataset-stroke-data.csv")
stroke_data.head(15)
# Step 1: Load and preprocess data
def load_data(filename):
    return pd.read_csv(filename)

def preprocess_data(data):
    cat_features = data.select_dtypes(include='object').columns
    num_features = data.select_dtypes(include='number').columns
    data["bmi"] = data["bmi"].fillna(data["bmi"].mean())
    encoded_cat_data = pd.get_dummies(data[cat_features], dtype=int)
    processed_data = pd.concat([encoded_cat_data, data[num_features]], axis=1)
    return processed_data

#preprocess data
processed_data = preprocess_data(stroke_data)

# Split data into features (X) and target variable (y)
X = processed_data.drop('stroke', axis=1)
y = processed_data['stroke']
# Step 3: Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 4: Standardize features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
# Step 5: Address Class Imbalance using SMOTE
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train_scaled, y_train)
# Step 6: Model Selection
log_reg = LogisticRegression(random_state=42)
nn_clf = MLPClassifier(random_state=42)
ada_clf = AdaBoostClassifier(random_state=42)
# Step 7: Train Logistic Regression classifier
log_reg.fit(X_train_resampled, y_train_resampled)
# Step 8: Train Neural Network classifier
nn_clf.fit(X_train_resampled, y_train_resampled)
# Step 9: Train AdaBoost classifier

ada_clf.fit(X_train_resampled, y_train_resampled)
# Step 10: Evaluate models on testing set
models = [log_reg, nn_clf, ada_clf]
model_names = ["Logistic Regression", "Neural Network", "AdaBoost"]

for model, name in zip(models, model_names):
    y_pred = model.predict(X_test_scaled)
    accuracy_test = accuracy_score(y_test, y_pred)
    print(f"\nAccuracy on the testing set ({name}): {accuracy_test:.2%}")
    print(f"Classification Report for {name}:")
    print(classification_report(y_test, y_pred))
# Step 11: Save the trained models and scaler
joblib.dump(log_reg, 'stroke_prediction_logistic_regression1.pkl')
joblib.dump(nn_clf, 'stroke_prediction_neural_network1.pkl')
joblib.dump(ada_clf, 'stroke_prediction_adaboost1.pkl')
joblib.dump(scaler, 'scaler4.pkl')




